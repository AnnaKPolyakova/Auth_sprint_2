name: Python application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
#  checks:
#    strategy:
#      matrix:
#        python-version: ['3.9']
#    runs-on: ubuntu-latest
#    services:
#      db:
#        image: postgres:12.4
#        env:
#          POSTGRES_DB: 'auth_test'
#          POSTGRES_USER: 'app'
#          POSTGRES_PASSWORD: '123qwe'
#        ports:
#          - 5432:5432
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#      redis:
#        image: redis
#        ports:
#          - 6379:6379
#        options: >-
#          --health-cmd "redis-cli ping"
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#    steps:
#    - uses: actions/checkout@v2
#    - name: Set up Python ${{ matrix.python-version }}
#      id: python-version
#      uses: actions/setup-python@v2
#      with:
#        python-version:  ${{ matrix.python-version }}
#    - name: Install dependencies
#      id: dependencies
#      if: always()
#      run: |
#        python -m pip install --upgrade pip
#        pip install wemake-python-styleguide flake8-html lxml mypy
#        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#
#    - name: Test with pytest
#      run: |
#        pytest

#    - name: send error message
#      uses: appleboy/telegram-action@master
#      if: failure()
#      with:
#        to: ${{ secrets.TELEGRAM_TO }}
#        token: ${{ secrets.TELEGRAM_TOKEN }}
#        message: "
#          _____________________________________________________________
#
#          Project: ${{ github.repository }}
#
#          Author: ${{ github.actor }}
#
#          Commit: ${{ github.sha }}
#
#          Python ${{ matrix.python-version }}
#
#          Pipeline finished with error.
#
#          Steps details - ${{ toJson(steps) }}
#        "
#    - name: send success message
#      uses: appleboy/telegram-action@master
#      if: success()
#      with:
#        to: ${{ secrets.TELEGRAM_TO }}
#        token: ${{ secrets.TELEGRAM_TOKEN }}
#        message: "
#          _____________________________________________________________
#
#          Project: ${{ github.repository }}
#
#          Author: ${{ github.actor }}
#
#          Commit: ${{ github.sha }}
#
#          Python ${{ matrix.python-version }}
#
#          Pipeline finished successfully.
#        "
  build_and_push_to_docker_hub:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
#      needs: checks
      steps:
        - name: Check out the repo
          # Проверка доступности репозитория Docker Hub для workflow
          uses: actions/checkout@v2
        - name: Set up Docker Buildx
          # Вызов сборщика контейнеров docker
          uses: docker/setup-buildx-action@v1
        - name: Login to Docker
          # Запуск скрипта авторизации на Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Push to Docker Hub
          # Пуш образа в Docker Hub
          uses: docker/build-push-action@v2
          with:
            push: true
            tags:  ${{ secrets.DOCKER_USERNAME }}/auth_sprint_2:latest:linux/arm64/v8
  deploy:
      runs-on: ubuntu-latest
#      needs: build_and_push_to_docker_hub
      steps:
        - name: executing remote ssh commands to deploy
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.SERVER_HOST }}
            username: ${{ secrets.SERVER_USERNAME }}
            key: ${{ secrets.SERVER_SSH_KEY }}
            passphrase: sova04088
            stack_file_name: docker-compose.yaml
            script: |
              sudo docker stop $(sudo docker ps -a -q)
#              sudo docker run --rm -d -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/auth_sprint_2:latest
              sudo docker-compose stop
              sudo docker-compose rm auth_app
              rm .env
              # Создаст файл для переменных окружения
              touch .env
              # Наполнит файл переменными окружения из секретов GitHub
              echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
              echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env
              echo FILM_CACHE_EXPIRE_IN_SECONDS=${{ secrets.FILM_CACHE_EXPIRE_IN_SECONDS }} >> .env
              echo REDIS_PROTOCOL=${{ secrets.REDIS_PROTOCOL }} >> .env
              echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
              echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
              echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
              echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
              echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
              echo POSTGRES_DB_TEST=${{ secrets.POSTGRES_DB_TEST }} >> .env
              echo JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} >> .env
              echo PAGE_SIZE=${{ secrets.PAGE_SIZE }} >> .env
              echo CLIENT_ID_YANDEX=${{ secrets.CLIENT_ID_YANDEX }} >> .env
              echo SECRET_YANDEX=${{ secrets.SECRET_YANDEX }} >> .env
              echo AUTH_URL_YANDEX=${{ secrets.AUTH_URL_YANDEX }} >> .env
              echo TOKEN_URL_YANDEX=${{ secrets.TOKEN_URL_YANDEX }} >> .env
              echo USER_INFO_URL_YANDEX=${{ secrets.USER_INFO_URL_YANDEX }} >> .env
              echo CLIENT_ID_VK=${{ secrets.CLIENT_ID_VK }} >> .env
              echo SECRET_VK=${{ secrets.SECRET_VK }} >> .env
              echo AUTH_URL_VK=${{ secrets.AUTH_URL_VK }} >> .env
              echo TOKEN_URL_VK=${{ secrets.TOKEN_URL_VK }} >> .env
              echo VERSION_VK=${{ secrets.VERSION_VK }} >> .env
              echo AGENT_HOST_NAME=${{ secrets.AGENT_HOST_NAME }} >> .env
              echo AGENT_PORT=${{ secrets.AGENT_PORT }} >> .env
              echo TRACER_ON=${{ secrets.TRACER_ON }} >> .env
              echo DEFAULT_LIMITS=${{ secrets.DEFAULT_LIMITS }} >> .env
              sudo docker-compose up -d